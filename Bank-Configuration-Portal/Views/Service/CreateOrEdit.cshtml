@model Bank_Configuration_Portal.Models.ServiceViewModel
@using Bank_Configuration_Portal.Resources

@{
    ViewBag.Title = Model.Id == 0 ? Language.Service_Create_Title : Language.Service_Edit_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var formAction = Model.Id == 0 ? "Create" : "Edit";
    bool conflict = (bool)(ViewBag.ConflictMode ?? false);
}

<div class="d-flex justify-content-center align-items-center form-container">
    <div class="card shadow-sm responsive-card">
        <div class="card-header text-center bg-primary text-white">
            <h3 class="mb-0">
                @(Model.Id == 0 ? Language.Service_Create_Title : Language.Service_Edit_Title)
            </h3>
        </div>

        <div class="card-body p-4">

            @Html.ConflictNotice(
                     show: conflict,
                     title: Language.Service_Concurrency_Error,
                     prompt: Language.Concurrency_ForcePrompt
                    )

            @using (Html.BeginFormAntiForgery(formAction, "Service", FormMethod.Post, new { @class = "needs-validation", role = "form" }))
            {
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.RowVersion)

                <div id="validationSummary" class="mb-3">
                    @Html.ValidationSummaryBlock()
                </div>

                if (!conflict)
                {
                    @Html.InputGroupTextFor(m => m.NameEnglish,
                                                  iconClass: "bi bi-translate",
                                                  placeholder: Language.Service_NameEnglish_Placeholder,
                                                  maxlength: 100)

                    @Html.InputGroupTextFor(m => m.NameArabic,
                                                  iconClass: "bi bi-translate",
                                                  placeholder: Language.Service_NameArabic_Placeholder,
                                                  maxlength: 100)

                    @Html.InputGroupNumberFor(m => m.MaxTicketsPerDay,
                                                   iconClass: "bi bi-123")

                    @Html.InputGroupNumberFor(m => m.MinServiceTimeSeconds,
                                                   iconClass: "bi bi-stopwatch")

                    @Html.InputGroupNumberFor(m => m.MaxServiceTimeSeconds,
                                                   iconClass: "bi bi-stopwatch")
                }
                else
                {
                    @Html.InputGroupTextReadOnlyFor(m => m.NameEnglish, iconClass: "bi bi-translate")
                    @Html.InputGroupTextReadOnlyFor(m => m.NameArabic, iconClass: "bi bi-translate")

                    @Html.InputGroupTextReadOnlyFor(m => m.MaxTicketsPerDay, iconClass: "bi bi-123")
                    @Html.InputGroupTextReadOnlyFor(m => m.MinServiceTimeSeconds, iconClass: "bi bi-stopwatch")
                    @Html.InputGroupTextReadOnlyFor(m => m.MaxServiceTimeSeconds, iconClass: "bi bi-stopwatch")
                }

                <div class="mb-3 form-check">
                    @Html.CheckBoxOrReadonlyFor(m => m.IsActive, readOnly: conflict,
                             checkboxHtmlAttributes: new { @class = "form-check-input" },
                             labelHtmlAttributes: new { @class = "form-check-label" })
                </div>

                <div class="d-grid gap-2 mt-4">
                    @if (!conflict)
                    {
                        @Html.PrimaryButton(Model.Id == 0 ? Language.Service_Create_Button : Language.Update_Button)
                    }
                    else
                    {
                        @Html.Hidden("forceUpdate", true)
                        @Html.DangerButton(Language.Force_Save)
                        <a href="@Url.Action("Edit", "Service", new { id = Model.Id })"
                           class="btn btn-outline-primary">
                            @Language.Reload_Changes
                        </a>
                    }

                    @Html.ActionLink(Language.Cancel_Button, "Index", "Service", null, new { @class = "btn btn-outline-secondary mt-2" })
                </div>
            }
        </div>
    </div>
</div>
