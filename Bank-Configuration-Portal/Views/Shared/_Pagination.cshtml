@model Bank_Configuration_Portal.Models.PaginationViewModel
@using Bank_Configuration_Portal.Resources

@if (Model.TotalPages > 1)
{
    <nav class="mt-4">
        <ul class="pagination justify-content-center flex-wrap">

            @{
                int currentPage = Model.CurrentPage;
                int totalPages = Model.TotalPages;

                var baseRouteValues = new RouteValueDictionary();
                if (Model.BranchId.HasValue)
                {
                    baseRouteValues.Add("branchId", Model.BranchId.Value);
                }
                if (!string.IsNullOrEmpty(Model.SearchTerm))
                {
                    baseRouteValues.Add("searchTerm", Model.SearchTerm);
                }
                if (Model.IsActive.HasValue)
                {
                    baseRouteValues.Add("isActive", Model.IsActive.Value);
                }

                // Previous
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    @{
                        var prevRouteValues = new RouteValueDictionary(baseRouteValues);
                        prevRouteValues["page"] = currentPage - 1;
                    }
                    <a class="page-link glass-bg border border-primary" href="@Url.Action(Model.ActionName, Model.ControllerName, prevRouteValues)" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>

                // Page 1 link
                <li class="page-item @(currentPage == 1 ? "active" : "")">
                    @{
                        var pageOneRouteValues = new RouteValueDictionary(baseRouteValues);
                        pageOneRouteValues["page"] = 1;
                    }
                    <a class="page-link glass-bg border border-primary" href="@Url.Action(Model.ActionName, Model.ControllerName, pageOneRouteValues)">1</a>
                </li>

                // Ellipsis before current block
                if (currentPage > 3)
                {
                    <li class="page-item disabled"><span class="page-link glass-bg border border-primary">…</span></li>
                }

                // Show a few pages around current
                for (int i = currentPage - 1; i <= currentPage + 1; i++)
                {
                    if (i > 1 && i < totalPages)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            @{
                                var pageRouteValues = new RouteValueDictionary(baseRouteValues);
                                pageRouteValues["page"] = i;
                            }
                            <a class="page-link glass-bg border border-primary" href="@Url.Action(Model.ActionName, Model.ControllerName, pageRouteValues)">@i</a>
                        </li>
                    }
                }

                // Ellipsis after current block
                if (currentPage < totalPages - 2)
                {
                    <li class="page-item disabled"><span class="page-link glass-bg border border-primary">…</span></li>
                }

                // Last page
                if (totalPages > 1)
                {
                    <li class="page-item @(currentPage == totalPages ? "active" : "")">
                        @{
                            var lastPageRouteValues = new RouteValueDictionary(baseRouteValues);
                            lastPageRouteValues["page"] = totalPages;
                        }
                        <a class="page-link glass-bg border border-primary" href="@Url.Action(Model.ActionName, Model.ControllerName, lastPageRouteValues)">@totalPages</a>
                    </li>
                }

                // Next
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    @{
                        var nextRouteValues = new RouteValueDictionary(baseRouteValues);
                        nextRouteValues["page"] = currentPage + 1;
                    }
                    <a class="page-link glass-bg border border-primary" href="@Url.Action(Model.ActionName, Model.ControllerName, nextRouteValues)" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }

        <li class="page-item ms-3">
            @using (Html.BeginForm(Model.ActionName, Model.ControllerName, baseRouteValues, FormMethod.Get, new { @class = "d-flex align-items-center" }))
            {
                <div class="input-group input-group-md">
                    @Html.TextBox("page", null, new
                    {
                        type = "number",
                        min = "1",
                        max = Model.TotalPages,
                        @class = "form-control page-link glass-bg border border-primary",
                        placeholder = Language.Page,
                        style = "width: 80px;"
                    })
                    <button type="submit" class="btn btn-primary glass-bg border border-primary">
                        @Language.Go
                    </button>
                </div>
            }
        </li>
        </ul>
    </nav>
}