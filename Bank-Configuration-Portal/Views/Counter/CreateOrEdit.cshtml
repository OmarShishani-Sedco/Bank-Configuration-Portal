@model Bank_Configuration_Portal.Models.CounterViewModel
@using Bank_Configuration_Portal.Resources

@{
    ViewBag.Title = Model.Id == 0 ? Language.Counter_Create_Title : Language.Counter_Edit_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var formAction = Model.Id == 0 ? "Create" : "Edit";
    var lang = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName;
    bool conflict = (bool)(ViewBag.ConflictMode ?? false);
}

<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="card shadow-sm" style="max-width: 500px; width: 100%;">
        <div class="card-header text-center bg-primary text-white">
            <h3 class="mb-0">
                @(Model.Id == 0 ? Language.Counter_Create_Title : Language.Counter_Edit_Title)
            </h3>
        </div>

        <div class="card-body p-4">

            @Html.ConflictNotice(
                     show: conflict,
                     title: Language.Counter_Concurrency_Error,
                     prompt: Language.Concurrency_ForcePrompt
                 )

            @using (Html.BeginFormAntiForgery(formAction, "Counter", FormMethod.Post, new { @class = "needs-validation d-flex flex-column", role = "form" }))
            {
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.RowVersion)
                @Html.HiddenFor(m => m.BranchId)

                if (!conflict)
                {
                    @Html.InputGroupTextFor(m => m.NameEnglish,
                                                  iconClass: "bi bi-translate",
                                                  placeholder: Language.Counter_NameEnglish_Placeholder,
                                                  maxlength: 100)
                }
                else
                {
                    @Html.InputGroupTextReadOnlyFor(m => m.NameEnglish, iconClass: "bi bi-translate")
                }

                if (!conflict)
                {
                    @Html.InputGroupTextFor(m => m.NameArabic,
                                                  iconClass: "bi bi-translate",
                                                  placeholder: Language.Counter_NameArabic_Placeholder,
                                                  maxlength: 100)
                }
                else
                {
                    @Html.InputGroupTextReadOnlyFor(m => m.NameArabic, iconClass: "bi bi-translate")
                }

                <div class="mb-3">
                    @Html.LabelFor(m => m.Type, new { @class = "form-label" })
                    @if (!conflict)
                    {
                        @Html.DropDownListFor(m => m.Type, Model.LocalizedCounterTypes, Language.Select_Type_Placeholder, new { @class = "form-control form-select" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.Type, Model.LocalizedCounterTypes, Language.Select_Type_Placeholder, new { @class = "form-control form-select", disabled = "disabled" })
                        @Html.HiddenFor(m => m.Type)
                    }
                    @Html.ValidationMessageFor(m => m.Type, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3 form-check">
                    @Html.CheckBoxOrReadonlyFor(m => m.IsActive, readOnly: conflict,
                             checkboxHtmlAttributes: new { @class = "form-check-input" },
                             labelHtmlAttributes: new { @class = "form-check-label" })
                </div>

                <div class="d-grid gap-2 mt-4 pt-3 border-top bg-body order-2">
                    @if (!conflict)
                    {
                        @Html.PrimaryButton(Model.Id == 0 ? Language.Counter_Create_Button : Language.Update_Button)
                    }
                    else
                    {
                        @Html.Hidden("forceUpdate", true)
                        @Html.DangerButton(Language.Force_Save)
                        <a href="@Url.Action("Edit", "Counter", new { id = Model.Id })"
                           class="btn btn-outline-primary">
                            @Language.Reload_Changes
                        </a>
                    }

                    @Html.ActionLink(
                             Language.Cancel_Button,
                             "Index",
                             "Counter",
                             new { branchId = Model.BranchId },
                             new { @class = "btn btn-outline-secondary mt-2" })
                </div>

                <div class="flex-grow-1 overflow-auto order-1" style="min-height:0;">
                    <div class="mb-2">
                        <label class="form-label">
                            @Language.Active_Service_Index_Title
                            @Html.ValidationMessageFor(m => m.SelectedServiceIds, "", new { @class = "text-danger d-block" })
                        </label>
                    </div>

                    <div class="p-2 border rounded" style="max-height: 200px; overflow-y: auto;">
                        @if (Model.AllActiveServices != null && Model.AllActiveServices.Any())
                        {
                            foreach (var service in Model.AllActiveServices)
                            {
                                var isChecked = Model.SelectedServiceIds != null && Model.SelectedServiceIds.Contains(service.Id);
                                <div class="form-check">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           id="service_@(service.Id)"
                                           name="SelectedServiceIds"
                                           value="@service.Id"
                                           @(isChecked ? "checked" : "")
                                           @(conflict ? "disabled" : "") />
                                    <label class="form-check-label" for="service_@(service.Id)">
                                        @(lang == "ar" ? service.NameArabic : service.NameEnglish)
                                    </label>
                                </div>
                            }

                            if (conflict && Model.SelectedServiceIds != null)
                            {
                                foreach (var sid in Model.SelectedServiceIds)
                                {
                                    <input type="hidden" name="SelectedServiceIds" value="@sid" />
                                }
                            }
                        }
                        else
                        {
                            <div class="text-muted">@Language.Service_Not_Found</div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>
