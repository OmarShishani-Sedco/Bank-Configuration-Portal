@model Bank_Configuration_Portal.Models.CounterViewModel
@using Bank_Configuration_Portal.Resources

@{
    ViewBag.Title = Model.Id == 0 ? Language.Counter_Create_Title : Language.Counter_Edit_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var formAction = Model.Id == 0 ? "Create" : "Edit";
    var lang = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName;
}

<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="card shadow-sm" style="max-width: 500px; width: 100%;">
        <div class="card-header text-center bg-primary text-white">
            <h3 class="mb-0">
                @(Model.Id == 0 ? Language.Counter_Create_Title : Language.Counter_Edit_Title)
            </h3>
        </div>

        <div class="card-body p-4">

            @if (ViewBag.ShowForceUpdate != null && (bool)ViewBag.ShowForceUpdate)
            {
                <div class="alert alert-warning text-center">
                    <p>@Language.Counter_Concurrency_Error</p>

                    <form method="post" asp-action="Edit">
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.Id)
                        @Html.HiddenFor(m => m.RowVersion)
                        @Html.HiddenFor(m => m.BranchId)
                        @Html.HiddenFor(m => m.NameEnglish)
                        @Html.HiddenFor(m => m.NameArabic)
                        @Html.HiddenFor(m => m.Type)
                        @Html.HiddenFor(m => m.IsActive)

                        @for (int i = 0; i < Model.SelectedServiceIds.Count; i++)
                        {
                            @Html.HiddenFor(m => m.SelectedServiceIds[i])
                        }

                        <input type="hidden" name="forceUpdate" value="true" />

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-danger">
                                @Language.Force_Save
                            </button>
                            <a href="@Url.Action("Edit", "Counter", new { id = Model.Id })" class="btn btn-outline-secondary">
                                @Language.Reload_Changes
                            </a>
                        </div>
                    </form>
                </div>
            }

            @using (Html.BeginForm(formAction, "Counter", FormMethod.Post, new { @class = "needs-validation", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.RowVersion)
                @Html.HiddenFor(m => m.BranchId) @* Hidden field for the branch association *@

                <div id="validationSummary" class="text-danger mb-3">
                    @Html.ValidationSummary(true)
                </div>


                <div class="mb-3">
                    @Html.LabelFor(m => m.NameEnglish, new { @class = "form-label" })
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-translate"></i></span>
                        @Html.TextBoxFor(m => m.NameEnglish, new
                        {
                            @class = "form-control",
                            placeholder = Language.Counter_NameEnglish_Placeholder,
                            maxlength = "100"
                        })
                    </div>
                    @Html.ValidationMessageFor(m => m.NameEnglish, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.NameArabic, new { @class = "form-label" })
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-translate"></i></span>
                        @Html.TextBoxFor(m => m.NameArabic, new
                        {
                            @class = "form-control",
                            placeholder = Language.Counter_NameArabic_Placeholder,
                            maxlength = "100"
                        })
                    </div>
                    @Html.ValidationMessageFor(m => m.NameArabic, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.Type, new { @class = "form-label" })
                    @Html.DropDownListFor(m => m.Type, Model.LocalizedCounterTypes, Language.Select_Type_Placeholder, new { @class = "form-control form-select" })
                    @Html.ValidationMessageFor(m => m.Type, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3 form-check">
                    @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input" })
                    @Html.LabelFor(m => m.IsActive, new { @class = "form-check-label" })
                </div>

                <div class="mb-3">
                    <label class="form-label">
                        @Language.Active_Service_Index_Title
                        @Html.ValidationMessageFor(m => m.SelectedServiceIds, "", new { @class = "text-danger d-block" })
                    </label>
                    <div class="p-3 border rounded" style="max-height: 200px; overflow-y: auto;">
                        @if (Model.AllActiveServices != null && Model.AllActiveServices.Any())
                        {
                            foreach (var service in Model.AllActiveServices)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox"
                                           id="service_@(service.Id)"
                                           name="SelectedServiceIds"
                                           value="@service.Id"
                                           @(Model.SelectedServiceIds.Contains(service.Id) ? "checked" : "") />
                                    <label class="form-check-label" for="service_@(service.Id)">
                                        @(lang == "ar" ? service.NameArabic : service.NameEnglish)
                                    </label>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-muted">@Language.Service_Not_Found</div>
                        }
                    </div>
                </div>
                <div class="d-grid gap-2 mt-4">
                    <button type="submit" class="btn btn-primary">
                        @(Model.Id == 0 ? Language.Counter_Create_Button : Language.Update_Button)
                    </button>
                    @Html.ActionLink(Language.Cancel_Button, "Index", "Counter", new { branchId = Model.BranchId }, new { @class = "btn btn-outline-secondary mt-2" })
                </div>
            }
        </div>
    </div>
</div>