@model Bank_Configuration_Portal.Models.CounterListViewModel
@using Bank_Configuration_Portal.Resources

@{
    ViewBag.Title = Language.Counter_Index_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var lang = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName;
}

<div class="container py-4">

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success fadeout3s">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger fadeout3s">@TempData["Error"]</div>
    }
    @if (TempData["Info"] != null)
    {
        <div class="alert alert-info fadeout3s">@TempData["Info"]</div>
    }

<div class="glass-card p-4 mb-4 d-flex justify-content-between align-items-center shadow-sm">
    <h2 class="mb-0 text-truncate me-3" title="@(lang == "ar" ? Model.BranchNameArabic : Model.BranchNameEnglish) - @Language.Counter_Index_Title">
        @(lang == "ar" ? Model.BranchNameArabic : Model.BranchNameEnglish) - @Language.Counter_Index_Title
    </h2>
    <div class="d-flex">
        @Html.ActionLink(Language.Back_To_Branches_Button, "Index", "Branch", null, new { @class = "btn btn-secondary me-2 text-nowrap" })
        @Html.ActionLink(Language.Counter_Create_Button, "Create", "Counter", new { branchId = Model.BranchId }, new { @class = "btn btn-primary text-nowrap" })
    </div>
</div>
    <div class="glass-card p-3 mb-4 shadow-sm">
        @using (Html.BeginForm("Index", "Counter", new { branchId = Model.BranchId }, FormMethod.Get, new { @class = "row g-3 align-items-end" }))
        {
            @Html.Hidden("branchId", Model.BranchId)

            <div class="col-md-5">
                @Html.Label("searchTerm", Language.Search_Name_Label, new { @class = "form-label" })
                @Html.TextBox("searchTerm", Model.SearchTerm, new { @class = "form-control glass-bg", placeholder = Language.Search_Name_Placeholder })
            </div>

            <div class="col-md-3">
                @Html.Label("isActive", Language.IsActive_Label, new { @class = "form-label" })
                @Html.DropDownList("isActive",
                    new SelectList(new[]
                    {
                        new { Value = "", Text = Language.Select_Button },
                        new { Value = "true", Text = Language.Active_Label },
                        new { Value = "false", Text = Language.Inactive_Label }
                    }, "Value", "Text", Model.IsActive?.ToString().ToLower()),
                    new { @class = "form-select glass-bg" })
            </div>

            <div class="col-md-4 d-grid gap-2 d-md-flex justify-content-md-end">
                <button type="submit" class="btn btn-primary"><i class="bi bi-search"></i> @Language.Search_Button</button>
                <a href="@Url.Action("Index", "Counter", new { branchId = Model.BranchId } )" class="btn btn-secondary"><i class="bi bi-x-circle"></i> @Language.Clear_Button</a>
            </div>
        }
    </div>

    @if (!Model.Counters.Any())
    {
        <div class="text-muted text-center">@Language.NoRecordsFound</div>
    }
    else
    {


        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var counter in Model.Counters)
            {
                <div class="col">
                    <div class="card glass-card h-100 shadow-sm">
                        <div class="card-body">
                            @if (lang == "ar")
                            {
                                <h5 class="card-title">@counter.NameArabic</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@counter.NameEnglish</h6>
                            }
                            else
                            {
                                <h5 class="card-title">@counter.NameEnglish</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@counter.NameArabic</h6>
                            }
                            <p>
                                <strong>@Language.IsActive_Label:</strong>
                                @if (counter.IsActive)
                                {
                                    <span class="badge bg-success">@Language.Active_Label</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">@Language.Inactive_Label</span>
                                }
                            </p>
                            <p class="mt-2">
                                <strong>@Language.Counter_Type_Label:</strong> @counter.GetLocalizedName(counter.Type)
                            </p>
                            <p>
                                <strong>@Language.Service_Index_Title:</strong>
                                @if (counter.SelectedServices != null && counter.SelectedServices.Any())
                                {
                                    <div class="d-flex flex-wrap gap-1">
                                        @{
                                            const int maxServicesToShow = 3;
                                            var servicesToShow = counter.SelectedServices.Take(maxServicesToShow);
                                        }

                                        @foreach (var service in servicesToShow)
                                        {
                                            var serviceName = lang == "ar" ? service.NameArabic : service.NameEnglish;
                                            <span class="badge bg-primary">
                                                @serviceName
                                            </span>
                                        }

                                        @if (counter.SelectedServices.Count > maxServicesToShow)
                                        {
                                            <span class="badge bg-light text-dark"
                                                  data-bs-toggle="tooltip" data-bs-placement="top"
                                                  title="@string.Join(", ", counter.SelectedServices.Skip(maxServicesToShow).Select(s => lang == "ar" ? s.NameArabic : s.NameEnglish))">
                                                +@(counter.SelectedServices.Count - maxServicesToShow) @Language.More_Button
                                            </span>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">@Language.No_Services_Allocated</span>
                                }
                            </p>

                            <div class="d-flex float-start mt-3">
                                @Html.ActionLink(Language.Edit_Label, "Edit", new { id = counter.Id }, new { @class = "btn btn-sm btn-warning me-2" })

                                <button type="button" class="btn btn-sm btn-danger delete-btn"
                                        data-bs-toggle="modal" data-bs-target="#confirmDeleteModal"
                                        data-id="@counter.Id"
                                        data-rowversion="@(counter.RowVersion != null ? Convert.ToBase64String(counter.RowVersion) : string.Empty)">
                                    @Language.Delete_Label
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (Model.TotalPages > 1)
    {
        @Html.Partial("_Pagination", new Bank_Configuration_Portal.Models.PaginationViewModel
   {
       CurrentPage = Model.CurrentPage,
       TotalPages = Model.TotalPages,
       ActionName = "Index",
       ControllerName = "Counter",
       SearchTerm = Model.SearchTerm,
       BranchId = Model.BranchId,
       IsActive = Model.IsActive
   })
    }
</div>
@Html.Partial("_DeleteModals", new Bank_Configuration_Portal.Models.DeleteModalViewModel
{
    ControllerName = "Counter",
    ConcurrencyErrorMessage = Language.Counter_Delete_Concurrency_Error
})

@section scripts {
    @Html.Partial("_ConcurrencyScript")
}