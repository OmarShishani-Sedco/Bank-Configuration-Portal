@model Bank_Configuration_Portal.Models.BranchViewModel
@using Bank_Configuration_Portal.Resources

@{
    ViewBag.Title = Model.Id == 0 ? Language.Branch_Create_Title : Language.Branch_Edit_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var formAction = Model.Id == 0 ? "Create" : "Edit";
    bool conflict = (bool)(ViewBag.ConflictMode ?? false);
}

<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="card shadow-sm" style="max-width: 500px; width: 100%;">
        <div class="card-header text-center bg-primary text-white">
            <h3 class="mb-0">
                @(Model.Id == 0 ? Language.Branch_Create_Title : Language.Branch_Edit_Title)
            </h3>
        </div>

        <div class="card-body p-4">

            @if (conflict)
            {
                <div class="alert alert-warning text-center mb-4">
                    <p class="mb-2">@Language.Branch_Concurrency_Error</p>
                    <small>@Language.Concurrency_ForcePrompt</small>
                </div>
            }

            @using (Html.BeginForm(formAction, "Branch", FormMethod.Post, new { @class = "needs-validation", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.BankId)
                @Html.HiddenFor(m => m.RowVersion) 

                

                <div class="mb-3">
                    @Html.LabelFor(m => m.NameEnglish, new { @class = "form-label" })
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-translate"></i></span>

                        @if (!conflict)
                        {
                            @Html.TextBoxFor(m => m.NameEnglish, new
                            {
                                @class = "form-control",
                                placeholder = Language.Branch_NameEnglish_Placeholder,
                                maxlength = "100"
                            })
                        }
                        else
                        {
                            @Html.TextBoxFor(m => m.NameEnglish, new
                            {
                                @class = "form-control",
                                @readonly = "readonly"
                            })
                            @Html.HiddenFor(m => m.NameEnglish) 
                        }
                    </div>
                    @Html.ValidationMessageFor(m => m.NameEnglish, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.NameArabic, new { @class = "form-label" })
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-translate"></i></span>

                        @if (!conflict)
                        {
                            @Html.TextBoxFor(m => m.NameArabic, new
                            {
                                @class = "form-control",
                                placeholder = Language.Branch_NameArabic_Placeholder,
                                maxlength = "100"
                            })
                        }
                        else
                        {
                            @Html.TextBoxFor(m => m.NameArabic, new
                            {
                                @class = "form-control",
                                @readonly = "readonly"
                            })
                            @Html.HiddenFor(m => m.NameArabic)
                        }
                    </div>
                    @Html.ValidationMessageFor(m => m.NameArabic, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3 form-check">
                    @if (!conflict)
                    {
                        @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input" })
                        @Html.LabelFor(m => m.IsActive, new { @class = "form-check-label" })
                    }
                    else
                    {
                        <input type="checkbox" class="form-check-input" @(Model.IsActive ? "checked" : "") disabled />
                        @Html.LabelFor(m => m.IsActive, new { @class = "form-check-label" })
                        @Html.HiddenFor(m => m.IsActive)
                    }
                </div>

                <div class="d-grid gap-2 mt-4">
                    @if (!conflict)
                    {
                        <button type="submit" class="btn btn-primary">
                            @(Model.Id == 0 ? Language.Branch_Create_Button : Language.Update_Button)
                        </button>
                    }
                    else
                    {
                        <input type="hidden" name="forceUpdate" value="true" />
                        <button type="submit" class="btn btn-danger">
                            @Language.Force_Save
                        </button>

                        <a href="@Url.Action("Edit", "Branch", new { id = Model.Id })"
                           class="btn btn-outline-secondary">
                            @Language.Reload_Changes
                        </a>
                    }

                    @Html.ActionLink(Language.Cancel_Button, "Index", "Branch", null, new { @class = "btn btn-outline-secondary" })
                </div>
            }
        </div>
    </div>
</div>
